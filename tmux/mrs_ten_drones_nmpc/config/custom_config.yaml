mrs_uav_managers:

  estimation_manager:

    # loaded state estimator plugins
    state_estimators: [
      "gps_baro",
      "ground_truth",
      # "rtk",
    ]

    initial_state_estimator: "ground_truth" # will be used as the first state estimator
    agl_height_estimator: "" # only slightly filtered height for checking min height (not used in control feedback)

  control_manager:

    safety:

      tilt_limit:

        eland:
          enabled: false

        disarm:
          enabled: false

      tilt_error_disarm:
        enabled: false

      yaw_error_eland:
        enabled: false

    ExampleTracker:
      address: "example_tracker_plugin/ExampleTracker"
      namespace: "example_tracker"
      human_switchable: true

    # list of names of dynamically loaded trackers
    trackers : [
      "ExampleTracker",
    ]

    NmpcController:
      address: "controller_module/ControllerModule"
      namespace: "controller_module"
      eland_threshold: 0.0 # [m], position error triggering eland
      failsafe_threshold: 0.0 # [m], position error triggering failsafe land
      odometry_innovation_threshold: 0 # [m], position odometry innovation threshold
      human_switchable: true

      # which outputs the controller can provide
      outputs:
        actuators:             false
        control_group:         false
        attitude_rate:         true
        attitude:              false
        acceleration_hdg_rate: false
        acceleration_hdg:      false
        velocity_hdg_rate:     false
        velocity_hdg:          false
        position:              false

    # list of names of dynamically loaded controllers
    controllers : [
      "NmpcController",
    ]


  uav_manager:

    takeoff:
      after_takeoff:
        controller: "NmpcController"
        tracker: "ExampleTracker"

    midair_activation:
      after_activation:
        tracker: "ExampleTracker"

    min_height_checking:
      enabled: false

    max_height_checking:
      enabled: false

  constraint_manager:

    superfast:

      horizontal:
        speed: 20.0
        acceleration: 40.0
        jerk: 1000.0
        snap: 1000.0

      vertical:

        ascending:
          speed: 20.0
          acceleration: 40.0
          jerk: 1000.0
          snap: 1000.0

        descending:
          speed: 20.0
          acceleration: 40.0
          jerk: 1000.0
          snap: 1000.0

      heading:
        speed: 2.0
        acceleration: 2.0
        jerk: 40.0
        snap: 40.0

      angular_speed:
        roll: 6000.0
        pitch: 6000.0
        yaw: 100.0

      tilt: 180.0 # [deg]

    estimator_types: [
      "gps_baro",
      "other",
      "ground_truth",
      "passthrough",
    ]

    constraints: [
      "slow",
      "medium",
      "fast",
      "superfast",
    ]

    # list of allowed constraints per odometry mode
    allowed_constraints:
      gps_garmin: ["slow", "medium", "fast", "superfast"]
      gps_baro: ["slow", "medium", "fast", "superfast"]
      rtk: ["slow", "medium", "fast"]
      rtk_garmin: ["slow", "medium", "fast"]
      other: ["slow"]
      ground_truth: ["slow", "medium", "fast", "superfast"]
      passthrough: ["slow", "medium", "fast", "superfast"]

    # those constraints will be used automatically when a localization mode switches
    # and the current constraints are not in the allowed list (next paragraphs)
    default_constraints:
      gps_garmin: "medium"
      gps_baro: "superfast"
      other: "slow"
      ground_truth: "superfast"
      passthrough: "medium"

mrs_uav_trackers:

  mpc_tracker:
    # mrs collision avoidance
    collision_avoidance:

      enabled:           false # disabling this will stop this UAV to react to others, but it will still transmit data to others
