mrs_uav_managers:

  estimation_manager:

    # loaded state estimator plugins
    # available in mrs_uav_state_estimators: gps_garmin, gps_baro, rtk, aloam, ground_truth, dummy
    state_estimators: [
    # "gps_baro",
    # "gps_garmin",
    "hector_garmin",

    # "rtk",
    # "aloam",
    # "ground_truth",
    # "dummy"
    ]

    initial_state_estimator: "hector_garmin" # will be used as the first state estimator
    agl_height_estimator: "garmin_agl" # only slightly filtered height for checking min height (not used in control feedback)

    # namespace of the state estimator
    hector_garmin:

      address: "hector/HectorEstimatorPlugin"

      requires: # data required from the hw api
        gnss: false
        imu: false
        distance_sensor: false
        altitude: false
        magnetometer_heading: false
        position: false
        orientation: true
        velocity: true
        angular_velocity: true

      override_frame_id: # override the default frame_id with a custom one
        enabled: true
        frame_id: "hector_origin" # the desired frame_id without the UAV namespace

      estimators: # the names of the partial estimators
        lateral:
          name: "lat_hector"
        altitude:
          name: "alt_garmin"
        heading:
          name: "hdg_hector"
          passthrough: false # if true, then heading is not estimated but passed through from the orientation topic

      topics:
        orientation: "hw_api/orientation" # orientation passthrough
        angular_velocity: "hw_api/angular_velocity" # angular velocity passthrough

      alt_garmin: # namespace of the altitude estimator

        max_flight_z: 10.0 # [m] maximum allowed flight Z (in the estimator frame)

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "mitigate" # {"eland", "switch", "mitigate"}

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: false

        process_noise: # process noise covariance (Q)
          pos: 1.0 # position state
          vel: 1.0 # velocity state
          acc: 1.0 # acceleration state

        corrections: [
          "pos_garmin",
          "vel_hw_api"
        ]

        pos_garmin:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.1 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "sensor_msgs/Range"
            topic: "hw_api/distance_sensor" # without uav namespace
            limit: 
              delay: 0.5 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: ["excessive_tilt", "median_filter", "saturate"] # types of processors attached to this measurement (the processors are called in exactly this order)
          
          median_filter:
            buffer_size: 100 # [samples] number of historic values from which the median is calculated
            max_diff: 2.0 # [m] difference of input value from median to be considered valid

          saturate:
            start_enabled: true # saturate processor can start as disabled and then be enabled by a service or a trigger condition
            keep_enabled: true # keep enabled even after the corrections are near the value of state
            min: -0.1
            max: 0.1
            limit: 2.0

          excessive_tilt:
            orientation_topic: "hw_api/orientation"
            max_tilt: 30.0 # [deg]

      # Parameters of altitude median filters - buffer_size , max_diff 
        vel_hw_api:
          state_id: 1 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.01 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/Vector3Stamped"
            topic: "hw_api/velocity" # without uav namespace
            limit: 
              delay: 1.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 0.5 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

      hdg_hector: # namespace of the heading estimator

        max_flight_z: 10.0 # [m] maximum allowed flight Z (in the estimator frame)

        position_innovation_limit: 1.0 # [m] innovation limit that will trigger switch to other estimator

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: true
          buffer_size: 200 # [samples] how many states and corrections are kept in history (i.e. estimator running at the default 100 Hz rate will be able to fuse corrections with up to 2 s delay with buffer size of 200 samples)

        process_noise: # process noise covariance (Q)
          pos: 0.1 # position state
          vel: 0.1 # velocity state

        corrections: [
          "hdg_hector"
        ]

        hdg_hector:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.0001 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/PoseStamped"
            topic: "hector_mapping/slam_out_pose" # without uav namespace
            limit: 
              delay: 2.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

      lat_hector: # namespace of the lateral estimator

        hdg_source_topic: "hector_garmin/hdg_hector/output" # [mrs_uav_state_estimation/EstimatorOutput]

        innovation:
          limit: 1.0 # [m] innovation limit that will trigger action
          action: "switch" # {"eland", "switch", "mitigate"}

        max_flight_z: 10.0 # [m] maximum allowed flight Z (in the estimator frame)

        repredictor: # repredictor for correct fusion of delayed measurements
          enabled: true
          buffer_size: 200 # [samples] how many states and corrections are kept in history (i.e. estimator running at the default 100 Hz rate will be able to fuse corrections with up to 2 s delay with buffer size of 200 samples)

        process_noise: # process noise covariance (Q)
          pos: 0.01 # position state
          vel: 0.1 # velocity state
          acc: 0.1 # acceleration state

        corrections: [
          "pos_hector"
        ]

        pos_hector:
          state_id: 0 # 0 - position, 1 - velocity, 2 - acceleration
          noise: 0.001 # measurement noise covariance (R)
          noise_unhealthy_coeff: 100.0 # covariance gets multiplied by this coefficient when correction is unhealthy (R)
          message:
            type: "geometry_msgs/PoseStamped"
            topic: "hector_mapping/slam_out_pose" # without uav namespace
            limit: 
              delay: 2.0 # [s] messages with higher delay will flag correction as unhealthy
              time_since_last: 1.0 # [s] larger time step between messages will flag correction as unhealthy

          processors: [] # types of processors attached to this measurement

  constraint_manager:

    estimator_types: [
      "hector_garmin"
    ]

    constraints: [
      "slow",
      "medium",
      "fast"
    ]

    # list of allowed gains per odometry mode
    allowed_constraints:
      hector_garmin: ["slow", "medium"]

    # those gains will be used automatically when a localization mode switches
    # and the current gains are not in the allowed list (next paragraphs)
    default_constraints:
      hector_garmin: "slow"

  gain_manager:

    estimator_types: [
      "hector_garmin"
    ]

    gains: [
      "supersoft"
    ]

    # list of allowed gains per odometry mode
    allowed_gains:
      hector_garmin: ["supersoft"]

    # those gains will be used automatically when a localization mode switches
    # and the current gains are not in the allowed list (next paragraphs)
    default_gains:
      hector_garmin: "supersoft"

  transform_manager:

    hector_garmin:
      odom_topic: "odom" # name of the topic (expects nav_msgs/Odometry topic type)
      tf_from_attitude: # used for transforming velocities before full transform is available
        enabled: true
        attitude_topic: "attitude" # name of the attitude topic(expects geometry_msgs/QuaternionStamped topic type)
      namespace: "estimation_manager/hector_garmin" # the namespace of the topic (usually the node that publishes the topic)
      utm_based: false # if true, will publish tf to utm_origin
      inverted: true # publish as inverted tf (the default for inverted mrs tf tree convention)
      republish_in_frames: [] # the odometry message will be transformed and republished in the specified frames
